/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author atha3
 */
public class Product extends javax.swing.JPanel {
    private final controller.ProductController productController = new controller.ProductController();
    private final controller.CategoryController categoryController = new controller.CategoryController();
    private final List<entity.Product> products = new ArrayList<>();
    private int modifiedProductId;

    /**
     * Creates new form ProductController
     */
    public Product() {
        initComponents();
        reload();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        productTitle = new javax.swing.JLabel();
        productName = new javax.swing.JTextField();
        labelName = new javax.swing.JLabel();
        labelCode = new javax.swing.JLabel();
        productCode = new javax.swing.JTextField();
        btnAddProduct = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        labelStock = new javax.swing.JLabel();
        labelCategory = new javax.swing.JLabel();
        labelPrice = new javax.swing.JLabel();
        productStock = new javax.swing.JTextField();
        productPrice = new javax.swing.JTextField();
        productCategory = new javax.swing.JComboBox<>();
        btnEditProduct = new javax.swing.JToggleButton();
        btnDeleteProduct = new javax.swing.JButton();

        productTitle.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        productTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        productTitle.setText("Manage Products");

        labelName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelName.setText("Name");

        labelCode.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelCode.setText("Code");

        btnAddProduct.setText("Add");
        btnAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProductActionPerformed(evt);
            }
        });

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Name", "Code", "Category", "Price", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productTable.setMaximumSize(null);
        jScrollPane5.setViewportView(productTable);

        labelStock.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelStock.setText("Stock");

        labelCategory.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelCategory.setText("Category");

        labelPrice.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        labelPrice.setText("Price");

        btnEditProduct.setText("Edit");
        btnEditProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditProductActionPerformed(evt);
            }
        });

        btnDeleteProduct.setText("Delete Selected");
        btnDeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteProductActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(productTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelName)
                                    .addComponent(labelCode)
                                    .addComponent(labelStock))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(productName, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                                            .addComponent(productCode)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(productStock, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(labelPrice)
                                            .addComponent(labelCategory))
                                        .addGap(13, 13, 13)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(productCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(productPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(btnAddProduct, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 859, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnEditProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeleteProduct)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(productTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(productCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelName)
                        .addComponent(productName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelCategory)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCode)
                    .addComponent(productCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPrice)
                    .addComponent(productPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelStock)
                    .addComponent(productStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddProduct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditProduct)
                    .addComponent(btnDeleteProduct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteProductActionPerformed
        int row = productTable.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(this, "No row is selected! Please select one row", "Select row",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this product?",
                "Delete Product", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
        
        String targetName = productTable.getValueAt(row, 1).toString();
        int id = products.stream().filter(p -> targetName.equals(p.getName())).map(entity.Product::getId).findFirst().orElse(-1);

        int rowsAffected = productController.deleteProduct(id);

        if (rowsAffected == 0) {
            JOptionPane.showMessageDialog(this, "Ooops... Failed", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        model.removeRow(row);
        JOptionPane.showMessageDialog(this, "Successfully delete product");
        reload();
    }//GEN-LAST:event_btnDeleteProductActionPerformed

    private void btnAddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProductActionPerformed
        if (!validateFields())
            return;
        
        String targetName = productName.getText();
        entity.Product pr = products.stream().filter(p -> p.getName().equalsIgnoreCase(targetName)).findFirst().orElse(null);
        if (pr != null) {
            JOptionPane.showMessageDialog(this, " product with name '" + targetName +  "' already exist");
            return;
        }
        
        String targetCode = productCode.getText();
        pr = products.stream().filter(p -> p.getCode().equalsIgnoreCase(targetCode)).findFirst().orElse(null);
        if (pr != null) {
            JOptionPane.showMessageDialog(this, " product with code ' " + targetCode +  "' already exist");
            return;
        }

        int rowsAffected = productController.createProduct(productName.getText(), productCode.getText(),
                productCategory.getSelectedItem().toString(), Integer.parseInt(productStock.getText()),
                Long.parseLong(productPrice.getText()));

        if (rowsAffected == 0) {
            JOptionPane.showMessageDialog(this, "Ooops... Failed", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        JOptionPane.showMessageDialog(this, "Successfuly add new product");
        reload();
    }//GEN-LAST:event_btnAddProductActionPerformed

    private void btnEditProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditProductActionPerformed
        if (btnEditProduct.isSelected()) {
            int row = productTable.getSelectedRow();

            if (row < 0) {
                JOptionPane.showMessageDialog(this, "No row is selected! Please select one row", "Select row",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            String targetName = productTable.getValueAt(row, 1).toString();
            int id = products.stream().filter(p -> targetName.equals(p.getName())).map(entity.Product::getId).findFirst().orElse(-1);

            entity.Product p = productController.getProductById(id);

            modifiedProductId = id;

            productName.setText(p.getName());
            productCode.setText(p.getCode());
            productStock.setText(String.format("%d", p.getStock()));
            productPrice.setText(String.format("%d", p.getPrice()));
            productCategory.setSelectedItem(p.getCategory().getName());

            productTable.clearSelection();
            btnEditProduct.setText("Update");
        } else {
            if (!validateFields()) return;
            
            String target = productName.getText();
            entity.Product pr = products.stream().filter(p -> p.getName().equalsIgnoreCase(target) && p.getId() != modifiedProductId).findFirst().orElse(null);
            if (pr != null) {
                JOptionPane.showMessageDialog(this, " product with name ' " + target +  " 'already exist");
                return;
            }
            
            String targetCode = productCode.getText();
            pr = products.stream().filter(p -> p.getCode().equalsIgnoreCase(targetCode) && p.getId() != modifiedProductId).findFirst().orElse(null);
            if (pr != null) {
                JOptionPane.showMessageDialog(this, " product with code ' " + targetCode +  " 'already exist");
                return;
            }

            int rowsAffected = productController.updateProduct(productName.getText(), productCode.getText(),
                    productCategory.getSelectedItem().toString(),
                    Integer.parseInt(productStock.getText()),
                    Long.parseLong(productPrice.getText()), modifiedProductId);

            if (rowsAffected == 0) {
                JOptionPane.showMessageDialog(this, "Ooops... Failed", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            JOptionPane.showMessageDialog(this, "Successfully update product");
            reload();
        }
    }//GEN-LAST:event_btnEditProductActionPerformed

    private void loadCategories() {
        productCategory.removeAllItems();
        productCategory.addItem("-- Select Category --");

        List<entity.Category> categories = categoryController.getAllCategories();
        for (entity.Category c : categories) {
            productCategory.addItem(c.getName());
        }
    }

    public void reload() {
        loadCategories();

        DefaultTableModel model = (DefaultTableModel) productTable.getModel();

        model.setRowCount(0);

        int rowNum = 1;
        List<entity.Product> res = productController.getAllProducts();
        for (entity.Product p : res) {
            model.addRow(new Object[] { rowNum++, p.getName(), p.getCode(), p.getCategory().getName(),
                    "Rp. " + p.getPrice(),
                    p.getStock() });
            products.add(p);
        }

        btnEditProduct.setSelected(false);
        productName.setText("");
        productCode.setText("");
        productStock.setText("");
        productPrice.setText("");
        productCategory.setSelectedIndex(0);
        productTable.clearSelection();
        modifiedProductId = -1;
        btnEditProduct.setText("Edit");
    }

    private boolean validateFields() {
        if (productName.getText().isEmpty() || productCode.getText().isEmpty() || productStock.getText().isEmpty()
                || productPrice.getText().isEmpty() | productCategory.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Please fill all the fields!", "Validation Error",
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }

        int stock;
        long price;

        try {
            stock = Integer.parseInt(productStock.getText());
            price = Long.parseLong(productPrice.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Stock and Price must be a number!", "Validation Error",
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }

        if (stock < 0) {
            JOptionPane.showMessageDialog(this, "Stock must be greater than 0!", "Validation Error",
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }

        if (price < 0) {
            JOptionPane.showMessageDialog(this, "Price must be greater than 0!", "Validation Error",
                    JOptionPane.WARNING_MESSAGE);
            return false;
        }

        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProduct;
    private javax.swing.JButton btnDeleteProduct;
    private javax.swing.JToggleButton btnEditProduct;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel labelCategory;
    private javax.swing.JLabel labelCode;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelPrice;
    private javax.swing.JLabel labelStock;
    private javax.swing.JComboBox<String> productCategory;
    private javax.swing.JTextField productCode;
    private javax.swing.JTextField productName;
    private javax.swing.JTextField productPrice;
    private javax.swing.JTextField productStock;
    private javax.swing.JTable productTable;
    private javax.swing.JLabel productTitle;
    // End of variables declaration//GEN-END:variables
}
